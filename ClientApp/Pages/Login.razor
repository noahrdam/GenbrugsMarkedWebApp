@page "/login"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Core.Model


@if (createAccount == false)
{
    <h3>Login</h3>
    <EditForm EditContext="@loginEditContext" OnValidSubmit="@HandleLogin" class="row p-3">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-12 mb-3">
            <label for="LoginUsername">Username</label>
            <InputText id="LoginUsername" @bind-Value="loginUser.Username" class="form-control" />
        </div>
        <div class="col-md-12 mb-3">
            <label for="LoginPassword">Password</label>
            <InputText id="LoginPassword" @bind-Value="loginUser.Password" class="form-control" />
        </div>
        <div class="col-md-12 mb-3">
            <button type="submit" class="btn btn-primary">Log in</button>
            <button type="button" class="btn btn-secondary" @onclick="ShowCreateAccount">Create an Account</button>
        </div>
        @if (!string.IsNullOrEmpty(loginMessage))
        {
            <div class="alert alert-info">@loginMessage</div>
        }
    </EditForm>
}
else
{
    <h3>Create Account</h3>
    <EditForm EditContext="@createEditContext" OnValidSubmit="@HandleCreateAccount" class="row p-3">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-12 mb-3">
            <label for="CreateUsername">Username</label>
            <InputText id="CreateUsername" @bind-Value="createUser.Username" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="CreatePassword">Password</label>
            <InputText id="CreatePassword" @bind-Value="createUser.Password" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="CreateEmail">Email</label>
            <InputText id="CreateEmail" @bind-Value="createUser.Email" class="form-control" />
        </div>
        <div class="col-md-12 mb-3">
            <button type="submit" class="btn btn-primary">Create</button>
            <button type="button" class="btn btn-info" @onclick="ShowLogin">Back to Login</button>
        </div>
    </EditForm>
}

@code {

    private User createUser = new User();
    private User loginUser = new User();
    private EditContext loginEditContext;
    private EditContext createEditContext;
    private string serverurl = "https://localhost:7148";
    private bool createAccount = false;
    private string loginMessage = "";

    protected override void OnInitialized()
    {
        loginEditContext = new EditContext(loginUser);
        createEditContext = new EditContext(createUser);
    }

    private async Task<bool> VerifyLogin(string username, string password)
    {
        var response = await Http.GetFromJsonAsync<bool>($"{serverurl}/api/login/verify?username={username}&password={password}");

        return response;
    }

    private async Task HandleLogin()
    {
        var user = await VerifyLogin(loginUser.Username, loginUser.Password);

        if (user)
        {
            var thisuser = await GetUser(loginUser.Username);
            await LocalStorage.SetItemAsync<User>("loginUser", thisuser);
            var target = await LocalStorage.GetItemAsStringAsync("target");
            loginMessage = "User logged in successfully";
            NavigationManager.NavigateTo("/myprofile");

        }
        else
        {
            loginMessage = "Failed to log in. Make sure you have an account";
        }
    }

    private async Task<User> GetUser(string username)
	{
		var response = await Http.GetFromJsonAsync<User>($"{serverurl}/api/login/getuser?username={username}");

		return response;
	}

    private async Task HandleCreateAccount()
    {
        var response = await Http.PostAsJsonAsync($"{serverurl}/api/login/createaccount", createUser);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("User created successfully");
            createAccount = false; // Optionally hide the create account form   
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to create user " + error);
        }
    }

    private void ShowCreateAccount()
    {
        createAccount = true;
    }

    private void ShowLogin()
    {
        createAccount = false;
    }
}
