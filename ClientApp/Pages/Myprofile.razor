@page "/myprofile"
@using Core.Model
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<h3>Create advertisement</h3>

<EditForm EditContext="@createEditContext" OnValidSubmit="@CreateAdvertisement" class="row p-3">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-6 mb-3">
        <label for="adName">Advertisement Name</label>
        <InputText id="adName" @bind-Value="makeAdvertisement.Name" placeholder="Write advertisement name..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adPrice">Price</label>
        <InputNumber id="adPrice" @bind-Value="makeAdvertisement.Price" placeholder="Write Price..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adDescription">Description</label>
        <InputText id="adDescription" @bind-Value="makeAdvertisement.Description" placeholder="Write Description..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adCategory">Category</label>
        <InputText id="adCategory" @bind-Value="makeAdvertisement.Category" placeholder="Write Category..." class="form-control"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="adStatus">Status</label>
        <InputText id="adStatus" @bind-Value="makeAdvertisement.Status" placeholder="Write Status..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adImage">Image URL</label>
        <InputText id="adImage" @bind-Value="makeAdvertisement.Image" placeholder="Write URL..." class="form-control" />
    </div>
   

    <button type="submit">Create advertisement</button>
</EditForm>


<EditForm EditContext="@deleteEditContext" OnValidSubmit="@DeleteById" class="row p-3">
    <div class="col-md-6 mb-3">
        <label for="adAdvertisementId">Advertisement ID</label>
        <InputNumber id="adAdvertisementId" @bind-Value="deleteadvertisement.AdvertisementId" placeholder="Write Advertisement ID..." class="form-control" />
    </div>
    <button type="submit">Delete Advertisement</button>
</EditForm>

<button @onclick="GetAllAdvertisementsByUser">Load My Advertisements</button>

@if (userAdvertisements != null)
{
    if (userAdvertisements.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Advertisement Name</th>
                    <th>Price</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Status</th>
                    <th>Image</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ad in userAdvertisements)
                {
                    <tr>
                        <td>@ad.Name</td>
                        <td>@ad.Price.ToString("C")</td>
                        <td>@ad.Description</td>
                        <td>@ad.Category</td>
                        <td>@ad.Status</td>
                        <td>
                            @if (!string.IsNullOrEmpty(ad.Image))
                            {
                                <img src="@ad.Image" alt="Ad Image" style="height:50px;" />
                            }
                        </td>
                        <td>
                            <!--<button @onclick="@(() => DeleteAdvertisement(ad.AdvertisementId))">Delete</button>-->
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No advertisements found.</p>
    }
}


@code {
    private Advertisement deleteadvertisement = new Advertisement();
    private Advertisement makeAdvertisement = new Advertisement();
    private Advertisement getAdvertisement = new Advertisement();
    private EditContext deleteEditContext;
    private EditContext createEditContext;
    private List<Advertisement> userAdvertisements = new List<Advertisement>();
    private string serverurl = "https://localhost:7148";
    private User? user;

    protected override async void OnInitialized()
    {
        createEditContext = new EditContext(makeAdvertisement);
        deleteEditContext = new EditContext(deleteadvertisement);
        user = await LocalStorage.GetItemAsync<User>("loginUser");
        if (user != null)
        {
            makeAdvertisement.User = user;
            getAdvertisement.User = user;
        }
    }

    private async Task CreateAdvertisement()
    {
        var response = await Http.PostAsJsonAsync<Advertisement>($"{serverurl}/api/myprofile/createadvertisement", makeAdvertisement);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Advertisement created successfully");
            // Optionally reset the form or navigate to another page
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to create advertisement: " + error);
            // Optionally handle the error, show an error message, etc.
        }
    }

    private async Task DeleteById()
    {
        var response = await Http.DeleteAsync($"{serverurl}/api/myprofile/delete/{deleteadvertisement.AdvertisementId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Advertisement deleted successfully");
            // Optionally reset the form or navigate to another page
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to delete advertisement: " + error);
            // Optionally handle the error, show an error message, etc.
        }
    }

    private async Task GetAllAdvertisementsByUser()
    {
       var username = user?.Username;
       var response = await Http.GetFromJsonAsync<List<Advertisement>>($"{serverurl}/api/myprofile/advertisements/{username}");
       if (response != null)
        {
            userAdvertisements = response;
        }
        else
        {
            userAdvertisements = new List<Advertisement>();
        }
    }

    

}