@page "/myprofile"
@using Core.Model
@inject HttpClient Http


<h3>Create advertisement</h3>

<EditForm EditContext="@createEditContext" OnValidSubmit="@CreateAdvertisement" class="row p-3">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-6 mb-3">
        <label for="adName">Advertisement Name</label>
        <InputText id="adName" @bind-Value="makeAdvertisement.Name" placeholder="Write advertisement name..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adPrice">Price</label>
        <InputNumber id="adPrice" @bind-Value="makeAdvertisement.Price" placeholder="Write Price..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adDescription">Description</label>
        <InputText id="adDescription" @bind-Value="makeAdvertisement.Description" placeholder="Write Description..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adCategory">Category</label>
        <InputText id="adCategory" @bind-Value="makeAdvertisement.Category" placeholder="Write Category..." class="form-control"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="adStatus">Status</label>
        <InputText id="adStatus" @bind-Value="makeAdvertisement.Status" placeholder="Write Status..." class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="adImage">Image URL</label>
        <InputText id="adImage" @bind-Value="makeAdvertisement.Image" placeholder="Write URL..." class="form-control" />
    </div>
   

    <button type="submit">Create advertisement</button>
</EditForm>


<EditForm EditContext="@deleteEditContext" OnValidSubmit="@DeleteById" class="row p-3">
    <div class="col-md-6 mb-3">
        <label for="adAdvertisementId">Advertisement ID</label>
        <InputNumber id="adAdvertisementId" @bind-Value="deleteadvertisement.AdvertisementId" placeholder="Write Advertisement ID..." class="form-control" />
    </div>
    <button type="submit">Delete Advertisement</button>
</EditForm>


<EditForm Model="@userAdvertisementsRequest" OnValidSubmit="@GetAdvertisementsByUserName" class="row p-3">
    <div class="col-md-6 mb-3">
        <label for="userName">Enter your username</label>
        <InputText id="userName" @bind-Value="userAdvertisementsRequest.Username" placeholder="Write your username..." class="form-control" />
    </div>
    <button type="submit">Get My Advertisements</button>
</EditForm>

@if (userAdvertisements != null)
{
    if (userAdvertisements.Any())
    {
        <h3>My Advertisements</h3>
        <ul>
            @foreach (var ad in userAdvertisements)
            {
                <li>@ad.Name - @ad.Description</li>
            }
        </ul>
    }
    else
    {
        <p>No advertisements found for the username.</p>
    }
}

@code {
    private Advertisement deleteadvertisement = new Advertisement();
    private Advertisement makeAdvertisement = new Advertisement();
    private UserAdvertisementsRequest userAdvertisementsRequest = new UserAdvertisementsRequest();

    private EditContext deleteEditContext;
    private EditContext createEditContext;
    private List<Advertisement> userAdvertisements;
    private string serverurl = "https://localhost:7148";

    protected override void OnInitialized()
    {
        createEditContext = new EditContext(makeAdvertisement);
        deleteEditContext = new EditContext(deleteadvertisement);
    }

    private async Task CreateAdvertisement()
    {
        var response = await Http.PostAsJsonAsync<Advertisement>($"{serverurl}/api/myprofile/createadvertisement", makeAdvertisement);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Advertisement created successfully");
            // Optionally reset the form or navigate to another page
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to create advertisement: " + error);
            // Optionally handle the error, show an error message, etc.
        }
    }

    private async Task DeleteById()
    {
        var response = await Http.DeleteAsync($"{serverurl}/api/myprofile/delete/{deleteadvertisement.AdvertisementId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Advertisement deleted successfully");
            // Optionally reset the form or navigate to another page
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to delete advertisement: " + error);
            // Optionally handle the error, show an error message, etc.
        }
    }

    private async Task GetAdvertisementsByUserName()
    {
        var response = await Http.GetFromJsonAsync<List<Advertisement>>($"{serverurl}/api/myprofile/advertisements/{userAdvertisementsRequest.Username}");
        userAdvertisements = response ?? new List<Advertisement>();
    }

}